import tkinter as tk
from tkinter import messagebox
from time import sleep
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from datetime import datetime
from selenium.common.exceptions import NoSuchElementException

def toggle_password_visibility():
    global password_entry
    if password_entry.cget("show") == "":
        password_entry.config(show="*")  # Passwort verbergen
    else:
        password_entry.config(show="")   # Passwort anzeigen

def update_date_input():
    if date_choice.get() == "Heute":
        date_entry.config(state='disabled')
        date_entry.delete(0, tk.END)
        date_entry.insert(0, datetime.now().strftime('%d.%m.%Y'))
    else:
        date_entry.config(state='normal')

def submit_form():
    try:
        # Benutzereingabe für Username, Passwort und IDs
        username = username_entry.get()
        password = password_entry.get()
        id_list = [entry.get() for entry in id_entries]

        # Vollständiger Pfad zum Chromedriver eingeben
        chrome_driver_path = 'path/to/chromedriver.exe'

        # Chrome-Optionen erstellen
        chrome_options = webdriver.ChromeOptions()

        # Service-Objekt initialisieren
        service_object = Service(chrome_driver_path)

        # Chrome-Treiber initialisieren
        driver = webdriver.Chrome(service=service_object, options=chrome_options)
        sleep(1)

        # Webseite aufrufen
        driver.get('https://example.com')

        # Login
        username_field = driver.find_element(By.NAME, 'benutzer')
        username_field.send_keys(username)
        password_field = driver.find_element(By.NAME, 'passwort')
        password_field.send_keys(password)
        login_button = driver.find_element(By.NAME, 'anmelden')
        login_button.click()
        sleep(1)

        # Login-Erfolgsüberprüfung
        try:
            driver.find_element(By.XPATH, '//label[text()="Systemtyp"]')
        except NoSuchElementException:
            raise Exception("Login fehlgeschlagen")

        for id_value in id_list:
            if not id_value:
                continue

            try:
                # ID-Suche
                search_bar = driver.find_element(By.ID, 'sucheFeld')
                search_bar.send_keys(id_value)
                sleep(1)
                search_bar.send_keys(Keys.ENTER)
                sleep(1)

                # Überprüfung des Schließungsdatums
                try:
                    closure_date_field = WebDriverWait(driver, 10).until(
                        EC.visibility_of_element_located((By.ID, 'schlussDatum'))
                    )
                    closure_date_value = closure_date_field.get_attribute('value')
                    if closure_date_value:
                        print(f"Datum gefunden: {closure_date_value}")
                        driver.quit()
                        return
                except NoSuchElementException:
                    pass

                # Systemtyp aktualisieren
                system_label = driver.find_element(By.XPATH, '//label[text()="Systemtyp"]')
                actions = ActionChains(driver)
                actions.double_click(system_label).perform()
                sleep(1)

                system_dropdown = driver.find_element(By.NAME, 'system_typ')
                select_system = Select(system_dropdown)
                select_system.select_by_visible_text('Neues System')
                sleep(1)

                # Felder deaktivieren
                ActionChains(driver).send_keys(Keys.TAB * 5).perform()
                WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'feature1')))
                driver.execute_script('document.querySelector(\'input[name="feature1"][type="checkbox"]\').checked = false;')
                sleep(1)

                # Änderungen speichern
                save_button = driver.find_element(By.ID, 'speichern')
                save_button.click()
                sleep(3)

                # Weitere Konfigurationsänderungen (z. B. Client, Monitor)
                try:
                    client_label = driver.find_element(By.XPATH, '//label[text()="Client"]')
                    actions.double_click(client_label).perform()
                    sleep(1)

                    # Anzahl
                    number_field = driver.find_element(By.ID, 'anzahl')
                    current_value = int(number_field.get_attribute('value'))
                    number_field.clear()
                    number_field.send_keys(str(current_value + 1))
                    sleep(1)

                    # Bezeichnung
                    dropdown = driver.find_element(By.NAME, 'client_typ')
                    select_client = Select(dropdown)
                    select_client.select_by_visible_text('Neuer Client')
                    sleep(1)

                    # Datum setzen
                    if date_choice.get() == "Heute":
                        current_date = datetime.now().strftime('%d.%m.%Y')
                    else:
                        current_date = date_entry.get()

                    date_input = driver.find_element(By.NAME, 'datum_client')
                    date_input.clear()
                    date_input.send_keys(current_date)
                    sleep(1)

                    # Monitor
                    monitor_dropdown = driver.find_element(By.NAME, 'monitor_typ')
                    select_monitor = Select(monitor_dropdown)
                    select_monitor.select_by_visible_text('Neuer Monitor')
                    sleep(1)

                    date_input = driver.find_element(By.NAME, 'datum_monitor')
                    date_input.clear()
                    date_input.send_keys(current_date)
                    sleep(1)

                    # Speicherung
                    save_button = driver.find_element(By.ID, 'speichern')
                    save_button.click()
                    sleep(1)

                    # Erfolgsmeldung
                    for entry in id_entries:
                        if entry.get() == id_value:
                            entry.config(bg="green", relief=tk.SOLID)
                except NoSuchElementException:
                    pass

            except Exception as e:
                for entry in id_entries:
                    if entry.get() == id_value:
                        entry.config(bg="red", relief=tk.SOLID)
                        break
    except Exception as e:
        fehler_label.config(text="Ein Fehler ist aufgetreten. Prüfen Sie Ihre Eingaben und Verbindung.")
        username_entry.config(bg="red", relief=tk.SOLID)
        password_entry.config(bg="red", relief=tk.SOLID)

# GUI erstellen
root = tk.Tk()
root.title("App Interface")

# Labels
tk.Label(root, text="Benutzername:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
tk.Label(root, text="Passwort:").grid(row=1, column=0, padx=5, pady=5, sticky="w")

# Datumsoptionen
date_choice = tk.StringVar(value="Heute")
tk.Radiobutton(root, text="Heute", variable=date_choice, value="Heute", command=update_date_input).grid(row=3, column=0)
tk.Radiobutton(root, text="Manuelles Datum", variable=date_choice, value="Manuell", command=update_date_input).grid(row=3, column=1)

# Datumseingabefeld
date_entry = tk.Entry(root, state='disabled')
date_entry.grid(row=3, column=2)
date_entry.insert(0, datetime.now().strftime('%d.%m.%Y'))

# Eintragsfelder
username_entry = tk.Entry(root)
password_entry = tk.Entry(root, show="*")
username_entry.grid(row=0, column=1, padx=5, pady=5)
password_entry.grid(row=1, column=1, padx=5, pady=5)

# Fehler- und Erfolgsmeldungslabels
fehler_label = tk.Label(root, text="", fg="red", wraplength=300)
fehler_label.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

# Eingabefelder für IDs
tk.Label(root, text="IDs:").grid(row=5, column=0, padx=5, pady=5, sticky="w")
id_entries = []
for i in range(5):
    entry = tk.Entry(root)
    entry.grid(row=i+5, column=1, padx=5, pady=5)
    id_entries.append(entry)

# Passwort-Anzeige-Toggle
show_password_button = tk.Button(root, text="Passwort anzeigen", command=toggle_password_visibility)
show_password_button.grid(row=1, column=2, padx=5, pady=5)

def on_submit():
    loading_window = tk.Toplevel(root)
    loading_window.title("Bitte warten")
    loading_label = tk.Label(loading_window, text="Die Verarbeitung läuft. Bitte das Programm nicht schließen.")
    loading_label.pack(padx=20, pady=10)
    loading_icon = tk.Label(loading_window, text="Lädt...")
    loading_icon.pack(pady=10)
    loading_window.update()
    submit_form()
    loading_window.destroy()

# Absenden-Button
submit_button = tk.Button(root, text="Absenden", command=on_submit)
submit_button.grid(row=len(id_entries)+6, column=0, columnspan=2, pady=10)

root.mainloop()
